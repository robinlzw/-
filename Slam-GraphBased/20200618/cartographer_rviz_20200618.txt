class OgreSlice {
	void Update(const ::cartographer::io::SubmapTexture& submap_texture);
	void SetAlpha(float alpha);	// Changes the opacity of the submap to 'alpha'.	
	void SetVisibility(bool visibility);  // Sets the local visibility of this slice.	
	void UpdateOgreNodeVisibility(bool submap_visibility);  // Updates the SceneNode to be visible if the submap and this slice are visible.

private:	
	const ::cartographer::mapping::SubmapId id_;
	const int slice_id_;
	Ogre::SceneManager* const scene_manager_;
	Ogre::SceneNode* const submap_node_;
	Ogre::SceneNode* const slice_node_;
	Ogre::ManualObject* const manual_object_;
	Ogre::TexturePtr texture_;
	Ogre::MaterialPtr material_;
	bool visibility_ = true;
}


class DrawableSubmap {
	...
	std::vector<std::unique_ptr<OgreSlice>> ogre_slices_;
	...
}


struct Trajectory : public QObject {
	Q_OBJECT

public:
	Trajectory(std::unique_ptr<::rviz::BoolProperty> property,
			 bool pose_markers_enabled);

	std::unique_ptr<::rviz::BoolProperty> visibility;
	std::unique_ptr<::rviz::BoolProperty> pose_markers_visibility;
	std::map<int, std::unique_ptr<DrawableSubmap>> submaps;

private Q_SLOTS:
	void AllEnabledToggled();
	void PoseMarkersEnabledToggled();
};


// RViz plugin used for displaying maps which are represented by a collection of
// submaps.
//
// We show an X-ray view of the map which is achieved by shipping textures for
// every submap containing pre-multiplied alpha and grayscale values, these are
// then alpha blended together.
class SubmapsDisplay
    : public ::rviz::MessageFilterDisplay<::cartographer_ros_msgs::SubmapList> {
  Q_OBJECT

public:
	SubmapsDisplay();
	~SubmapsDisplay() override;

private Q_SLOTS:
	void Reset();
	void AllEnabledToggled();
	void PoseMarkersEnabledToggled();
	void ResolutionToggled();

private:
	void CreateClient();

	// These are called by RViz and therefore do not adhere to the style guide.
	void onInitialize() override;
	void reset() override;
	void processMessage(const ::cartographer_ros_msgs::SubmapList::ConstPtr& msg) override;
	void update(float wall_dt, float ros_dt) override;

	::tf2_ros::Buffer tf_buffer_;
	::tf2_ros::TransformListener tf_listener_;
	ros::ServiceClient client_;
	::rviz::StringProperty* submap_query_service_property_;
	std::unique_ptr<std::string> map_frame_;
	::rviz::StringProperty* tracking_frame_property_;
	Ogre::SceneNode* map_node_ = nullptr;  // Represents the map frame.
	std::map<int, std::unique_ptr<Trajectory>> trajectories_ GUARDED_BY(mutex_);
	absl::Mutex mutex_;
	::rviz::BoolProperty* slice_high_resolution_enabled_;
	::rviz::BoolProperty* slice_low_resolution_enabled_;
	::rviz::Property* trajectories_category_;
	::rviz::BoolProperty* visibility_all_enabled_;
	::rviz::BoolProperty* pose_markers_all_enabled_;
	::rviz::FloatProperty* fade_out_start_distance_in_meters_;
};
